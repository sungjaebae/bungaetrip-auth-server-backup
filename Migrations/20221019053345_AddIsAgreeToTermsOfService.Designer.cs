// <auto-generated />
using System;
using AuthenticationServer.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthenticationServer.API.Migrations
{
    [DbContext(typeof(AuthenticationDbContext))]
    [Migration("20221019053345_AddIsAgreeToTermsOfService")]
    partial class AddIsAgreeToTermsOfService
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AuthenticationServer.API.Entities.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(19)")
                        .HasColumnName("member_id");

                    b.Property<int?>("Age")
                        .HasColumnType("int(10)")
                        .HasColumnName("age");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("gender");

                    b.Property<string>("Nickname")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nickname");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("member");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1153), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail1@google.com",
                            Gender = "MALE",
                            Nickname = "이한별",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1257), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail2@google.com",
                            Gender = "FEMALE",
                            Nickname = "박성재",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1261), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail3@google.com",
                            Gender = "FEMALE",
                            Nickname = "이한별",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1264), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail4@google.com",
                            Gender = "FEMALE",
                            Nickname = "최저스틴",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1267), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail5@google.com",
                            Gender = "FEMALE",
                            Nickname = "박두훈",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername5"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1279), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail6@google.com",
                            Gender = "MALE",
                            Nickname = "박성재",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername6"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1281), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail7@google.com",
                            Gender = "FEMALE",
                            Nickname = "한두훈",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername7"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1353), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail8@google.com",
                            Gender = "FEMALE",
                            Nickname = "이저스틴",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername8"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1356), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail9@google.com",
                            Gender = "MALE",
                            Nickname = "김저스틴",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername9"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 10, 19, 5, 33, 44, 935, DateTimeKind.Unspecified).AddTicks(1360), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "seedMail10@google.com",
                            Gender = "MALE",
                            Nickname = "한한별",
                            Password = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            Role = "ROLE_USER",
                            UserName = "seedUsername10"
                        });
                });

            modelBuilder.Entity("AuthenticationServer.API.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("AuthenticationServer.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAgreeToTermsOfService")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint(19)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0212b38e-ed16-486a-a6df-68f904b8a228",
                            Email = "seedMail1@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 1L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bdedb2e-66fd-489d-917d-435c0f2f89c1",
                            Email = "seedMail2@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 2L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66e080e4-8773-4d48-b6ed-efd497970438",
                            Email = "seedMail3@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 3L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b137b98-3a53-49d9-9852-df69a03398a0",
                            Email = "seedMail4@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 4L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fec042a9-56e2-451c-9b04-f9b4e7dc8ac6",
                            Email = "seedMail5@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 5L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39b37158-c7c1-4cb4-85e2-48fd94ae6f3b",
                            Email = "seedMail6@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 6L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername6"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95f6c680-860b-479f-98ad-d6b831821042",
                            Email = "seedMail7@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 7L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb9d0229-0aba-4a3e-a2e0-82b3e047e31a",
                            Email = "seedMail8@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 8L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername8"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7143820d-681d-437e-9644-3bc68d20d992",
                            Email = "seedMail9@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 9L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername9"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "214ad1b8-613d-4fef-89ee-97a3d9ac4c72",
                            Email = "seedMail10@google.com",
                            EmailConfirmed = false,
                            IsAgreeToTermsOfService = true,
                            LockoutEnabled = false,
                            MemberId = 10L,
                            PasswordHash = "$2a$11$mxHSiaqgPKuhCf0G83fEquaLN7qi7MbU.sMVPiswlM94BCB3iSjGO",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "seedUsername10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AuthenticationServer.API.Entities.User", b =>
                {
                    b.HasOne("AuthenticationServer.API.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AuthenticationServer.API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AuthenticationServer.API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthenticationServer.API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AuthenticationServer.API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
